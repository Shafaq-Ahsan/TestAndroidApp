Index: app/src/main/java/com/app/motory/dealer/fragments/Dashboard/AuctionListingFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.motory.dealer.fragments.Dashboard\r\n\r\nimport android.content.Context.LAYOUT_INFLATER_SERVICE\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\n\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.core.widget.NestedScrollView\r\nimport androidx.lifecycle.Lifecycle\r\nimport androidx.lifecycle.Observer\r\nimport androidx.lifecycle.ViewModelProviders\r\nimport androidx.navigation.fragment.findNavController\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.app.motory.R\r\nimport com.app.motory.databinding.FragmentAuctionListingBinding\r\nimport com.app.motory.dealer.ApplicationClass\r\nimport com.app.motory.dealer.adapter.AuctionItemClickListener\r\nimport com.app.motory.dealer.adapter.AuctionsAdapter\r\nimport com.app.motory.dealer.adapter.ChipItemClickListener\r\nimport com.app.motory.dealer.adapter.ChipsAdapter\r\nimport com.app.motory.dealer.fragments.BaseFragment\r\nimport com.app.motory.dealer.models.AuctionTempModel\r\nimport com.app.motory.dealer.models.ChipsTempModel\r\nimport com.app.motory.dealer.utils.Enums\r\nimport com.app.motory.dealer.viewmodels.MainActivityViewModel\r\nimport com.app.network_module.models.request.auction.RequestAuctionFavourite\r\nimport com.app.network_module.models.response.auction_listing.ResponseAuctionListingItem\r\nimport kotlinx.android.synthetic.main.fragment_auction_listing.*\r\nimport kotlinx.coroutines.*\r\nimport kotlin.coroutines.CoroutineContext\r\n\r\n\r\ninternal class AuctionListingFragment(private val auctionsType: Enums.AuctionListingFragmentType = Enums.AuctionListingFragmentType.HOME_LIVE_AUCTIONS) :\r\n    BaseFragment() {\r\n\r\n    private lateinit var mBinding: FragmentAuctionListingBinding\r\n    private lateinit var mViewModel: MainActivityViewModel\r\n    private lateinit var mAdapter: AuctionsAdapter\r\n    private lateinit var auctions: ArrayList<AuctionTempModel>\r\n    private var mLoading = true\r\n\r\n    override fun init() {\r\n\r\n        auctions = arguments?.getParcelableArrayList(\"auctions\") ?: arrayListOf()\r\n        val chipsAdapter = ChipsAdapter(ChipItemClickListener {\r\n\r\n            mViewModel.apply {\r\n                when (auctionsType) {\r\n                    Enums.AuctionListingFragmentType.HOME_LIVE_AUCTIONS -> {\r\n\r\n                        if (it.id.toString() == filterLive) {\r\n                            return@ChipItemClickListener\r\n                        }\r\n                        filterLive = it.id.toString()\r\n                        createDataAuctions()\r\n                    }\r\n\r\n                    Enums.AuctionListingFragmentType.HOME_UPCOMING_AUCTIONS -> {\r\n\r\n                        if (it.id.toString() == filterUpcoming) {\r\n                            return@ChipItemClickListener\r\n                        }\r\n                        filterUpcoming = it.id.toString()\r\n                        createDataAuctions()\r\n                    }\r\n                }\r\n            }\r\n\r\n        }, requireContext())\r\n\r\n\r\n        chipsAdapter.setData(getChipsData())\r\n        mBinding.chipsRv.adapter = chipsAdapter\r\n        mBinding.chipsRv.layoutManager =\r\n            LinearLayoutManager(requireContext(), RecyclerView.HORIZONTAL, false)\r\n\r\n        if (auctions.isNullOrEmpty()) {\r\n\r\n//            mBinding.carTypeRv.visibility = View.GONE\r\n//            will need to send fragment ids here\r\n//            showEmptyState(auctionsType)\r\n\r\n        } else {\r\n            setAdapter()\r\n        }\r\n\r\n        if (auctionsType == Enums.AuctionListingFragmentType.HOME_UPCOMING_AUCTIONS || auctionsType == Enums.AuctionListingFragmentType.HOME_LIVE_AUCTIONS) {\r\n            mBinding.chipsRv.visibility = View.VISIBLE\r\n        }\r\n\r\n      setShimmerData()\r\n\r\n    }\r\n\r\n    private fun setShimmerData() {\r\n        val inflater = requireContext().getSystemService(LAYOUT_INFLATER_SERVICE) as LayoutInflater\r\n\r\n        shimmer_layout.removeAllViews()\r\n\r\n        when (auctionsType) {\r\n\r\n            Enums.AuctionListingFragmentType.FAVOURITE_PAST_AUCTIONS -> {\r\n                for (i in 1..2) {\r\n                    val childLayout: View = inflater.inflate(\r\n                        R.layout.shimmer_completed_auction_card, null\r\n                    )\r\n                    shimmer_layout.addView(childLayout)\r\n                }\r\n            }\r\n\r\n            Enums.AuctionListingFragmentType.FAVOURITE_UPCOMING_AUCTIONS -> {\r\n                for (i in 1..2) {\r\n                    val childLayout: View = inflater.inflate(\r\n                        R.layout.shimmer_upcoming_auction_card, null\r\n                    )\r\n                    shimmer_layout.addView(childLayout)\r\n                }\r\n            }\r\n\r\n            Enums.AuctionListingFragmentType.HOME_UPCOMING_AUCTIONS -> {\r\n\r\n                for (i in 1..2) {\r\n                    val childLayout: View = inflater.inflate(\r\n                        R.layout.shimmer_upcoming_auction_card, null\r\n                    )\r\n                    shimmer_layout.addView(childLayout)\r\n                }\r\n            }\r\n            else -> {\r\n                for (i in 1..2) {\r\n                    val childLayout: View = inflater.inflate(\r\n                        R.layout.shimmer_live_auction_card, null\r\n                    )\r\n                    shimmer_layout.addView(childLayout)\r\n                }\r\n            }\r\n        }\r\n\r\n        mBinding.shimmerLayout.visibility = View.VISIBLE\r\n        shimmer_view_container.startShimmer()\r\n    }\r\n\r\n    private fun setAdapter() {\r\n//        mBinding.carTypeRv.visibility = View.VISIBLE\r\n        mAdapter = AuctionsAdapter(requireActivity(), AuctionItemClickListener({\r\n\r\n            val b = Bundle()\r\n            it.auctionId?.let { it1 -> b.putInt(Enums.BundleKeys.AUCTION_ID.key, it1) }\r\n            findNavController().navigate(R.id.action_dashboardFragment_to_carDetailsFragments, b)\r\n\r\n        }, {\r\n\r\n            mViewModel.callServerForPostAuctionFavourite(\r\n                RequestAuctionFavourite(\r\n                    auctionId = it.auctionId,\r\n                    favourite = it.isFav != 1\r\n                ),\r\n                auctionsType\r\n            )\r\n\r\n        }), auctionsType)\r\n        mBinding.carTypeRv.adapter = mAdapter\r\n        mBinding.carTypeRv.layoutManager = LinearLayoutManager(requireContext())\r\n    }\r\n\r\n    private fun createDataAuctions() {\r\n        mBinding.apply {\r\n            mViewModel.apply {\r\n\r\n                val list = arrayListOf<AuctionTempModel>()\r\n\r\n                val match: String = when (auctionsType) {\r\n                    Enums.AuctionListingFragmentType.HOME_LIVE_AUCTIONS -> {\r\n                        Enums.AuctionStatus.LIVE.key\r\n\r\n                    }\r\n\r\n                    Enums.AuctionListingFragmentType.HOME_UPCOMING_AUCTIONS -> {\r\n                        Enums.AuctionStatus.UPCOMING.key\r\n                    }\r\n\r\n                    Enums.AuctionListingFragmentType.FAVOURITE_UPCOMING_AUCTIONS -> {\r\n                        Enums.AuctionStatus.UPCOMING.key\r\n                    }\r\n\r\n                    Enums.AuctionListingFragmentType.FAVOURITE_CURRENT_AUCTIONS -> {\r\n                        Enums.AuctionStatus.LIVE.key\r\n                    }\r\n\r\n                    else -> {\r\n                        Enums.AuctionStatus.LIVE.key\r\n                    }\r\n\r\n                }\r\n\r\n                val type: Int = when (auctionsType) {\r\n                    Enums.AuctionListingFragmentType.HOME_LIVE_AUCTIONS -> {\r\n                        1\r\n                    }\r\n\r\n                    Enums.AuctionListingFragmentType.HOME_UPCOMING_AUCTIONS -> {\r\n                        3\r\n                    }\r\n\r\n                    Enums.AuctionListingFragmentType.FAVOURITE_CURRENT_AUCTIONS -> {\r\n                        1\r\n                    }\r\n\r\n                    Enums.AuctionListingFragmentType.FAVOURITE_UPCOMING_AUCTIONS -> {\r\n                        3\r\n                    }\r\n\r\n                    Enums.AuctionListingFragmentType.FAVOURITE_PAST_AUCTIONS -> {\r\n                        2\r\n                    }\r\n\r\n                    else -> {\r\n                        1\r\n                    }\r\n                }\r\n\r\n                var listAuctionItem = arrayListOf<ResponseAuctionListingItem>()\r\n\r\n                if ((auctionsType == Enums.AuctionListingFragmentType.FAVOURITE_UPCOMING_AUCTIONS || auctionsType == Enums.AuctionListingFragmentType.FAVOURITE_CURRENT_AUCTIONS)) {\r\n                    responseAuctionListing.value?.apply {\r\n                        filter {\r\n                            it.status == match && it.favourite?.toInt() == 1\r\n                        }.apply {\r\n                            listAuctionItem = this as ArrayList<ResponseAuctionListingItem>\r\n                        }\r\n\r\n                    }\r\n                } else {\r\n\r\n                    responseAuctionListing.value?.apply {\r\n                        filter {\r\n                            it.status == match\r\n                        }.apply {\r\n                            listAuctionItem = this as ArrayList<ResponseAuctionListingItem>\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (auctionsType == Enums.AuctionListingFragmentType.FAVOURITE_PAST_AUCTIONS) {\r\n                    responseAuctionFavouritePast.value?.items?.apply {\r\n\r\n                        filter {\r\n                            it.favourite?.toInt() == 1\r\n                        }.forEach {\r\n                            val model = AuctionTempModel.convertToAuctionTemp(it)\r\n\r\n                            model.status = type\r\n\r\n                            list.add(model)\r\n                        }\r\n\r\n                    }\r\n\r\n                } else {\r\n\r\n                    if ((auctionsType == Enums.AuctionListingFragmentType.HOME_UPCOMING_AUCTIONS && mViewModel.filterUpcoming != \"0\")\r\n                        || (auctionsType == Enums.AuctionListingFragmentType.HOME_LIVE_AUCTIONS && mViewModel.filterLive != \"0\")\r\n                    ) {\r\n\r\n                        //CHECK LOCAL FILTERS\r\n                        var filter = \"0\"\r\n\r\n                        if (auctionsType == Enums.AuctionListingFragmentType.HOME_LIVE_AUCTIONS) {\r\n                            filter = mViewModel.filterLive\r\n                        } else if (auctionsType == Enums.AuctionListingFragmentType.HOME_UPCOMING_AUCTIONS) {\r\n                            filter = mViewModel.filterUpcoming\r\n                        }\r\n\r\n                        listAuctionItem.filter {\r\n                            it.inspectionType == filter\r\n                        }.forEach {\r\n                            val model = AuctionTempModel.convertToAuctionTemp(it)\r\n                            model.status = type\r\n                            list.add(model)\r\n                        }\r\n\r\n                    } else {\r\n\r\n                        listAuctionItem.forEach {\r\n                            val model = AuctionTempModel.convertToAuctionTemp(it)\r\n                            model.status = type\r\n                            list.add(model)\r\n                        }\r\n                    }\r\n\r\n                }\r\n\r\n                if (list.isEmpty()) {\r\n                   showEmptyState(auctionsType)\r\n                } else {\r\n                    carTypeRv.visibility = View.VISIBLE\r\n                    emptyState.visibility = View.GONE\r\n                    btnRefresh.visibility = View.GONE\r\n                }\r\n\r\n                shimmer_view_container.stopShimmer()\r\n                shimmerLayout.visibility = View.GONE\r\n                mAdapter.setAuctions(list)\r\n                mLoading = true\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun getChipsData(): ArrayList<ChipsTempModel> {\r\n\r\n        val chipsData = ArrayList<ChipsTempModel>()\r\n        val obj1 = ChipsTempModel()\r\n        obj1.id = 1\r\n        obj1.name = ApplicationClass.languageJson?.home?.salvage\r\n        obj1.selected = false\r\n        val obj2 = ChipsTempModel()\r\n        obj2.id = 2\r\n        obj2.name = ApplicationClass.languageJson?.home?.wholeSale\r\n        obj2.selected = false\r\n        val obj3 = ChipsTempModel()\r\n        obj3.id = 3\r\n        obj3.name = ApplicationClass.languageJson?.home?.retail\r\n        obj3.selected = false\r\n        var obj4 = ChipsTempModel()\r\n        obj4.id = 0\r\n        obj4.name = ApplicationClass.languageJson?.home?.all\r\n        obj4.selected = false\r\n\r\n        chipsData.add(obj4)\r\n        chipsData.add(obj1)\r\n        chipsData.add(obj2)\r\n        chipsData.add(obj3)\r\n\r\n        if (auctionsType == Enums.AuctionListingFragmentType.HOME_UPCOMING_AUCTIONS && mViewModel.filterUpcoming != \"0\") {\r\n            chipsData[mViewModel.filterUpcoming.toInt().dec()].selected = true\r\n        } else if (auctionsType == Enums.AuctionListingFragmentType.HOME_LIVE_AUCTIONS && mViewModel.filterLive != \"0\") {\r\n            chipsData[mViewModel.filterLive.toInt().dec()].selected = true\r\n        }\r\n\r\n        return chipsData\r\n\r\n    }\r\n\r\n    override fun setListeners() {\r\n        mBinding.apply {\r\n            btnRefresh.setOnClickListener(this@AuctionListingFragment)\r\n\r\n            nestedScroll.setOnScrollChangeListener(NestedScrollView.OnScrollChangeListener { v: NestedScrollView, scrollX: Int, scrollY: Int, oldScrollX: Int, oldScrollY: Int ->\r\n                if (v.getChildAt(v.childCount - 1) != null) {\r\n                    if (scrollY >= v.getChildAt(v.childCount - 1)\r\n                            .measuredHeight - v.measuredHeight &&\r\n                        scrollY > oldScrollY\r\n                    ) {\r\n\r\n                        if (auctionsType == Enums.AuctionListingFragmentType.FAVOURITE_PAST_AUCTIONS) {\r\n                            val data = mAdapter.data\r\n                            if (mLoading && data.size < mViewModel.responseAuctionFavouritePast.value?.pagination?.totalCount ?: 0) {\r\n                                mLoading = false\r\n                                data.add(AuctionTempModel().apply {\r\n                                    status = 4\r\n                                })\r\n                                mAdapter.notifyItemChanged(data.size.dec())\r\n                                mViewModel.callServerForAuctionFavouritePast(true)\r\n                            }\r\n\r\n                        }\r\n\r\n                    }\r\n                }\r\n            })\r\n\r\n        }\r\n    }\r\n\r\n    override fun setLanguageData() {\r\n\r\n    }\r\n\r\n    override fun getFragmentLayout() = R.layout.fragment_auction_listing\r\n\r\n    override fun getViewBinding() {\r\n        mBinding = binding as FragmentAuctionListingBinding\r\n    }\r\n\r\n    override fun getViewModel() {\r\n        mViewModel = ViewModelProviders.of(requireActivity()).get(MainActivityViewModel::class.java)\r\n    }\r\n\r\n    override fun observe() {\r\n        mViewModel.apply {\r\n            responseAuctionListing.observe(this@AuctionListingFragment, Observer {\r\n                it ?: return@Observer\r\n\r\n                if (auctionsType != Enums.AuctionListingFragmentType.FAVOURITE_PAST_AUCTIONS) {\r\n                    setData()\r\n                }\r\n\r\n            })\r\n\r\n            responseAuctionFavouritePast.observe(this@AuctionListingFragment, Observer {\r\n                it ?: return@Observer\r\n\r\n                if (auctionsType == Enums.AuctionListingFragmentType.FAVOURITE_PAST_AUCTIONS) {\r\n                    setData()\r\n                }\r\n\r\n            })\r\n        }\r\n    }\r\n\r\n    private fun setData() {\r\n        setAdapter()\r\n\r\n        if (auctions.isNotEmpty()) {\r\n            mAdapter.setAuctions(auctions)\r\n\r\n        } else {\r\n            createDataAuctions()\r\n        }\r\n    }\r\n\r\n    override fun setLiveDataValues() {\r\n        //setData()\r\n    }\r\n\r\n    override fun onClick(v: View?) {\r\n        when (v?.id) {\r\n            R.id.btn_refresh -> {\r\n\r\n                setShimmerData()\r\n\r\n                when (auctionsType) {\r\n\r\n                    Enums.AuctionListingFragmentType.HOME_LIVE_AUCTIONS -> {\r\n                        mViewModel.callServerForGetAuctionListing()\r\n                    }\r\n\r\n                    Enums.AuctionListingFragmentType.HOME_UPCOMING_AUCTIONS -> {\r\n                        mViewModel.callServerForGetAuctionListing()\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun showEmptyState(fragment: Enums.AuctionListingFragmentType) {\r\n\r\n        mBinding.apply {\r\n//            carTypeRv.visibility = View.GONE\r\n            emptyState.visibility = View.VISIBLE\r\n            when (fragment) {\r\n                Enums.AuctionListingFragmentType.HOME_UPCOMING_AUCTIONS -> {\r\n//                    home\r\n                    ivEmptyState.setImageDrawable(\r\n                        ContextCompat.getDrawable(\r\n                            requireContext(),\r\n                            R.drawable.svg_calendar\r\n                        )\r\n                    )\r\n\r\n                    if (mViewModel.filterUpcoming != \"0\") {\r\n                        btnRefresh.visibility = View.GONE\r\n\r\n                    } else {\r\n                        btnRefresh.visibility = View.VISIBLE\r\n                    }\r\n\r\n                    tvEmptyState.setText(\r\n                        ApplicationClass?.languageJson?.emptyStates?.upcoming ?: \"\"\r\n                    )\r\n                }\r\n\r\n                Enums.AuctionListingFragmentType.HOME_LIVE_AUCTIONS -> {\r\n//                    home\r\n                    ivEmptyState.setImageDrawable(\r\n                        ContextCompat.getDrawable(\r\n                            requireContext(),\r\n                            R.drawable.svg_live_auctions\r\n                        )\r\n                    )\r\n\r\n                    if (mViewModel.filterLive != \"0\") {\r\n                        btnRefresh.visibility = View.GONE\r\n                    } else {\r\n                        btnRefresh.visibility = View.VISIBLE\r\n                    }\r\n\r\n                    tvEmptyState.setText(\r\n                        ApplicationClass.languageJson?.emptyStates?.liveAuctions ?: \"\"\r\n                    )\r\n                }\r\n\r\n                Enums.AuctionListingFragmentType.FAVOURITE_CURRENT_AUCTIONS, Enums.AuctionListingFragmentType.FAVOURITE_UPCOMING_AUCTIONS, Enums.AuctionListingFragmentType.FAVOURITE_PAST_AUCTIONS -> {\r\n//                    favourites\r\n                    ivEmptyState.setImageDrawable(\r\n                        ContextCompat.getDrawable(\r\n                            requireContext(),\r\n                            R.drawable.svg_star_grey\r\n                        )\r\n                    )\r\n                    btnRefresh.visibility = View.GONE\r\n                    tvEmptyState.setText(\r\n                        ApplicationClass.languageJson?.emptyStates?.favourites ?: \"\"\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    fun hideEmptyState() {\r\n        mBinding.emptyState.visibility = View.GONE\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/app/motory/dealer/fragments/Dashboard/AuctionListingFragment.kt	(revision 4aeebc02610872ef3e236e8a26a1b1d5156c469b)
+++ app/src/main/java/com/app/motory/dealer/fragments/Dashboard/AuctionListingFragment.kt	(date 1609425280818)
@@ -1,6 +1,7 @@
 package com.app.motory.dealer.fragments.Dashboard
 
 import android.content.Context.LAYOUT_INFLATER_SERVICE
+import android.graphics.Color
 import android.os.Bundle
 import android.view.LayoutInflater
 import android.view.View
@@ -95,6 +96,7 @@
     }
 
     private fun setShimmerData() {
+
         val inflater = requireContext().getSystemService(LAYOUT_INFLATER_SERVICE) as LayoutInflater
 
         shimmer_layout.removeAllViews()
@@ -300,8 +302,23 @@
                     btnRefresh.visibility = View.GONE
                 }
 
-                shimmer_view_container.stopShimmer()
-                shimmerLayout.visibility = View.GONE
+
+                if (mViewModel.responseAuctionListing.value != null && (auctionsType == Enums.AuctionListingFragmentType.HOME_LIVE_AUCTIONS ||
+                            auctionsType == Enums.AuctionListingFragmentType.HOME_UPCOMING_AUCTIONS ||
+                            auctionsType == Enums.AuctionListingFragmentType.FAVOURITE_CURRENT_AUCTIONS ||
+                            auctionsType == Enums.AuctionListingFragmentType.FAVOURITE_UPCOMING_AUCTIONS) ) {
+                    shimmer_view_container.stopShimmer()
+                    shimmerLayout.visibility = View.GONE
+                    mBinding.nestedScroll.setBackgroundColor(Color.TRANSPARENT)
+                }
+
+                if (mViewModel.responseAuctionFavouritePast.value != null &&auctionsType == Enums.AuctionListingFragmentType.FAVOURITE_PAST_AUCTIONS  ) {
+                    shimmer_view_container.stopShimmer()
+                    shimmerLayout.visibility = View.GONE
+                }
+
+
+
                 mAdapter.setAuctions(list)
                 mLoading = true
 
@@ -423,7 +440,8 @@
     }
 
     override fun setLiveDataValues() {
-        //setData()
+
+        setData()
     }
 
     override fun onClick(v: View?) {
