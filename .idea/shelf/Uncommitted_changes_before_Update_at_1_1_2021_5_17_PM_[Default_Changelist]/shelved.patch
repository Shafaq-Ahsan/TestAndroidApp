Index: app/src/main/java/com/app/motory/dealer/fragments/FiltersFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.motory.dealer.fragments\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.MotionEvent\r\nimport android.view.View\r\nimport androidx.lifecycle.Observer\r\nimport androidx.lifecycle.ViewModelProviders\r\nimport androidx.navigation.fragment.findNavController\r\nimport com.app.motory.R\r\nimport com.app.motory.databinding.FragmentFiltersBinding\r\nimport com.app.motory.dealer.ApplicationClass\r\nimport com.app.motory.dealer.customViews.YearSeekBar\r\nimport com.app.motory.dealer.models.TempFeatureModel\r\nimport com.app.motory.dealer.models.TempFilterModel2\r\nimport com.app.motory.dealer.utils.Toast\r\nimport com.app.motory.dealer.utils.getFormattedCurrency\r\nimport com.app.motory.dealer.viewmodels.MainActivityViewModel\r\nimport com.app.network_module.models.response.filter.Make\r\nimport com.app.network_module.models.response.filter.Model\r\nimport kotlinx.android.synthetic.main.activity_main.*\r\nimport kotlinx.android.synthetic.main.fragment_filters.*\r\nimport kotlinx.android.synthetic.main.fragment_make_filter_bottom_sheet.*\r\nimport kotlinx.android.synthetic.main.toolbar_with_back_button.view.*\r\n\r\n\r\ninternal class FiltersFragment : BaseFragment(), View.OnTouchListener {\r\n\r\n    private lateinit var mBinding: FragmentFiltersBinding\r\n    private lateinit var mViewModel: MainActivityViewModel\r\n    private lateinit var data: ArrayList<Make>\r\n    private lateinit var carModelData: ArrayList<Model>\r\n    private lateinit var tempModel: TempFilterModel2\r\n    private lateinit var minValuePrice: String\r\n    private lateinit var maxValuePrice: String\r\n\r\n    private lateinit var minValueMileage: String\r\n    private lateinit var maxValueMileage: String\r\n\r\n\r\n    companion object {\r\n        var makePosition = 0\r\n        var modelPosition = 0\r\n        var makeText = \"0\"\r\n    }\r\n\r\n    override fun getFragmentLayout() = R.layout.fragment_filters\r\n\r\n    override fun getViewBinding() {\r\n        mBinding = binding as FragmentFiltersBinding\r\n    }\r\n\r\n    override fun getViewModel() {\r\n        mViewModel = ViewModelProviders.of(requireActivity()).get(MainActivityViewModel::class.java)\r\n    }\r\n\r\n    override fun observe() {\r\n        mViewModel.apply {\r\n            responseFilterMeta.observe(this@FiltersFragment, Observer {\r\n                it ?: return@Observer\r\n                data = (it.makes as ArrayList<Make>?)!!\r\n                makeText = data[0].name.toString()\r\n                tvMakeSelected.text = data[0].name\r\n                carModelData = it.models as ArrayList<Model>\r\n                tvModelSelected.text = carModelData[0].name\r\n\r\n                setFilters()\r\n\r\n            })\r\n        }\r\n\r\n\r\n//        makeLiveData()\r\n//        modelLiveData()\r\n\r\n\r\n    }\r\n\r\n    private fun makeLiveData() {\r\n        mViewModel.makeLiveData.observe(this, Observer {\r\n\r\n            tvMakeSelected.text = it.name\r\n\r\n            if (makeText != it.name) {\r\n                makeText = it.name!!\r\n                mViewModel._modelLiveData.value = carModelData[0]\r\n                mViewModel.modelPosition.value = 0\r\n                modelPosition = 0\r\n\r\n            }\r\n        })\r\n        mViewModel.makePosition.observe(this, Observer {\r\n            makePosition = it\r\n        })\r\n\r\n    }\r\n\r\n    private fun modelLiveData() {\r\n        mViewModel.modelLiveData.observe(this, Observer {\r\n\r\n            tvModelSelected.text = it.name\r\n            tvMakeSelected.text = makeText\r\n\r\n        })\r\n        mViewModel.modelPosition.observe(this, Observer {\r\n            modelPosition = it\r\n        })\r\n    }\r\n\r\n    private fun setFilters() {\r\n        mViewModel.responseFilterMeta.value?.apply {\r\n            mBinding.apply {\r\n\r\n                //TODO remove hardcoded after proper data\r\n\r\n                //     tvPriceStarting.text = getFormattedCurrency(/*price?.from ?: \"\"*/ \"60000\")\r\n                // price?.from\r\n                minValuePrice = price?.from.toString()\r\n                maxValuePrice = price?.to.toString()\r\n                tvPriceStarting.text = getFormattedCurrency(price?.from ?: \"\")\r\n                tvPriceEnding.text = getFormattedCurrency(price?.to ?: \"\")\r\n                priceSeekBar.setRangeValues(\r\n                    price?.from?.toInt() ?: 0,\r\n                    price?.to?.toInt() ?: 0\r\n                )\r\n\r\n                //  tvMileageStarting.text = getFormattedCurrency(/*mileage?.from ?: \"\"*/ \"500\")\r\n\r\n                minValueMileage = mileage?.from.toString()\r\n                maxValueMileage = mileage?.to.toString()\r\n\r\n                tvMileageStarting.text = getFormattedCurrency(mileage?.from ?: \"\")\r\n                tvMileageEnding.text = getFormattedCurrency(mileage?.to ?: \"\")\r\n                mileageSeekBar.setRangeValues(\r\n                    /*mileage?.from?.toInt() ?: 0*/  mileage?.from?.toInt() ?: 0,\r\n                    mileage?.to?.toInt() ?: 0\r\n                )\r\n\r\n\r\n                tvYearStarting.text = /*year?.from*/ \"2000\"\r\n                tvYearStarting.text = year?.from\r\n                tvYearEnding.text = year?.to\r\n                yearSeekBar.setRangeValues(\r\n                    year?.from?.toInt() ?: 0,\r\n                    year?.to?.toInt() ?: 0\r\n                )\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun setLiveDataValues() {\r\n        setFilters()\r\n        makeLiveData()\r\n        modelLiveData()\r\n    }\r\n\r\n    override fun init() {\r\n\r\n        mViewModel.responseFilterMeta.value ?: mViewModel.callServerForGetAuctionFilterMeta()\r\n\r\n\r\n        if (nav_host_fragment.findNavController().currentDestination?.id == R.id.filtersFragment) {\r\n            binding.apply {\r\n                toolbarBack.tvReset.visibility = View.VISIBLE\r\n            }\r\n\r\n        } else {\r\n            binding.apply {\r\n                toolbarBack.tvReset.visibility = View.GONE\r\n            }\r\n        }\r\n\r\n        mBinding.apply {\r\n            val filtersEnv = ApplicationClass.languageJson?.filters\r\n            toolbarBack.tvTitle.text = filtersEnv?.filters\r\n            toolbarBack.tvReset.text = filtersEnv?.reset\r\n            tvFiltersNote.text = filtersEnv?.tvFiltersNote\r\n            tvMake.text = filtersEnv?.tvMake\r\n            tvModel.text = filtersEnv?.tvModel\r\n            tvYear.text = filtersEnv?.tvYear\r\n            tvPrice.text = filtersEnv?.tvPrice\r\n            tvMileage.text = filtersEnv?.tvMileage\r\n            btnSave.text = filtersEnv?.btnSave\r\n            tvYear.text = filtersEnv?.tvYear\r\n\r\n\r\n        }\r\n\r\n        yearSeekBar.setOnRangeSeekBarChangeListener { yearSeekBar: YearSeekBar<out Number>, minValue: Number, maxValue: Number ->\r\n            tvYearStarting.text = minValue.toString()\r\n            tvYearEnding.text = maxValue.toString()\r\n        }\r\n\r\n        priceSeekBar.setOnRangeSeekBarChangeListener { bar, minValue, maxValue ->\r\n            minValuePrice = minValue.toString()\r\n            maxValuePrice = maxValue.toString()\r\n\r\n            tvPriceStarting.text = getFormattedCurrency(minValue.toString())\r\n            tvPriceEnding.text = getFormattedCurrency(maxValue.toString())\r\n\r\n        }\r\n\r\n\r\n        mileageSeekBar.setOnRangeSeekBarChangeListener { bar, minValue, maxValue ->\r\n//            tvMileageStarting.text = getFormattedCurrency(minValue.toString())\r\n//            tvMileageEnding.text = getFormattedCurrency(maxValue.toString())\r\n\r\n            tvMileageStarting.text = minValue.toString()\r\n            tvMileageEnding.text = maxValue.toString()\r\n\r\n\r\n        }\r\n        touchListeners()\r\n    }\r\n\r\n\r\n    private fun touchListeners() {\r\n        yearSeekBar.setOnTouchListener(this@FiltersFragment)\r\n    }\r\n\r\n    override fun setListeners() {\r\n        mBinding.apply {\r\n            tvMakeSelected.setOnClickListener(this@FiltersFragment)\r\n            tvModelSelected.setOnClickListener(this@FiltersFragment)\r\n            toolbarBack.btnBackButton.setOnClickListener(this@FiltersFragment)\r\n            btnSave.setOnClickListener(this@FiltersFragment)\r\n        }\r\n    }\r\n\r\n    override fun setLanguageData() {\r\n\r\n    }\r\n\r\n    override fun onClick(v: View?) {\r\n\r\n        when (v?.id) {\r\n            R.id.btnBackButton -> {\r\n                //  findNavController().navigateUp()\r\n\r\n\r\n            }\r\n\r\n            R.id.tvMakeSelected -> {\r\n                val b = Bundle()\r\n                b.putInt(\"MakePosition\", makePosition)\r\n                b.putStringArrayList(\"FilterData\", data as java.util.ArrayList<String>)\r\n                findNavController().navigate(R.id.makeFilterFragment, b)\r\n            }\r\n\r\n            R.id.tvModelSelected -> {\r\n\r\n                val value = mViewModel.makePosition.value ?: 0\r\n                if (value != 0) {\r\n                    val b = Bundle()\r\n                    b.putInt(\"ModelPosition\", mViewModel.modelPosition.value ?: 0)\r\n                    val filterCarModelData = ArrayList<Model>()\r\n                    for (i in carModelData) {\r\n                        if (i.id == \"0\") {\r\n                            filterCarModelData.add(i)\r\n                        }\r\n                        if (i.makeId == data[value].id) {\r\n                            filterCarModelData.add(i)\r\n                        }\r\n                    }\r\n                    b.putStringArrayList(\r\n                        \"CarModelData\",\r\n                        filterCarModelData as java.util.ArrayList<String>\r\n                    )\r\n                    findNavController().navigate(R.id.modelFilterFragment, b)\r\n                }\r\n            }\r\n\r\n            R.id.btnSave -> {\r\n                //  requireContext().Toast(\"Feature is In Progress\")\r\n                tempModel = TempFilterModel2()\r\n                tempModel.make = mViewModel.makeLiveData.value?.id ?: \"0\"\r\n                tempModel.model = mViewModel.modelLiveData.value?.id ?: \"0\"\r\n                tempModel.yearBeginning = tvYearStarting.text.toString()\r\n                tempModel.yearEnding = tvYearEnding.text.toString()\r\n                tempModel.priceBeginning = minValuePrice\r\n                tempModel.priceEnding = maxValuePrice\r\n                tempModel.mileageBeginning = minValueMileage\r\n                tempModel.mileageEnding = maxValueMileage\r\n\r\n                mViewModel.filterData = tempModel\r\n//                requireContext().Toast(tempModel.toString())\r\n\r\n                findNavController().navigateUp()\r\n\r\n            }\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\n    @SuppressLint(\"ClickableViewAccessibility\")\r\n    override fun onTouch(v: View?, event: MotionEvent?): Boolean {\r\n        val action = event?.action\r\n        when (action) {\r\n            MotionEvent.ACTION_DOWN ->                 // Disallow ScrollView to intercept touch events.\r\n                v?.parent?.requestDisallowInterceptTouchEvent(true)\r\n            MotionEvent.ACTION_UP ->                 // Allow ScrollView to intercept touch events.\r\n                v?.parent?.requestDisallowInterceptTouchEvent(false)\r\n        }\r\n\r\n        // Handle Seekbar touch events.\r\n\r\n        // Handle Seekbar touch events.\r\n        v?.onTouchEvent(event)\r\n        return true\r\n    }\r\n\r\n    private fun onReset() {\r\n        mBinding.apply {\r\n\r\n        }\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/app/motory/dealer/fragments/FiltersFragment.kt	(revision 2536b8574454a38b0a9b4dddee4171782dcea375)
+++ app/src/main/java/com/app/motory/dealer/fragments/FiltersFragment.kt	(date 1609503115302)
@@ -80,15 +80,18 @@
     private fun makeLiveData() {
         mViewModel.makeLiveData.observe(this, Observer {
 
-            tvMakeSelected.text = it.name
+
+                tvMakeSelected.text = it.name
 
-            if (makeText != it.name) {
-                makeText = it.name!!
-                mViewModel._modelLiveData.value = carModelData[0]
-                mViewModel.modelPosition.value = 0
-                modelPosition = 0
+                if (makeText != it.name) {
+                    makeText = it.name!!
+                    mViewModel._modelLiveData.value = carModelData[0]
+                    mViewModel.modelPosition.value = 0
+                    modelPosition = 0
 
-            }
+                }
+
+
         })
         mViewModel.makePosition.observe(this, Observer {
             makePosition = it
@@ -237,7 +240,7 @@
 
         when (v?.id) {
             R.id.btnBackButton -> {
-                //  findNavController().navigateUp()
+                 findNavController().navigateUp()
 
 
             }
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"PLATFORM\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n            <option value=\"$PROJECT_DIR$/network_module\" />\r\n          </set>\r\n        </option>\r\n        <option name=\"resolveModulePerSourceSet\" value=\"false\" />\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/gradle.xml	(revision 2536b8574454a38b0a9b4dddee4171782dcea375)
+++ .idea/gradle.xml	(date 1609494999060)
@@ -7,6 +7,7 @@
         <option name="testRunner" value="PLATFORM" />
         <option name="distributionType" value="DEFAULT_WRAPPED" />
         <option name="externalProjectPath" value="$PROJECT_DIR$" />
+        <option name="gradleJvm" value="1.8" />
         <option name="modules">
           <set>
             <option value="$PROJECT_DIR$" />
@@ -15,6 +16,7 @@
           </set>
         </option>
         <option name="resolveModulePerSourceSet" value="false" />
+        <option name="useQualifiedModuleNames" value="true" />
       </GradleProjectSettings>
     </option>
   </component>
