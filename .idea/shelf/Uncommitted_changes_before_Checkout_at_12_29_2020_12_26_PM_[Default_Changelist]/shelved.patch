Index: app/src/main/java/com/app/motory/dealer/viewmodels/MainActivityViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.app.motory.dealer.viewmodels\r\n\r\nimport android.os.Handler\r\nimport android.util.Log\r\nimport androidx.lifecycle.LiveData\r\nimport androidx.lifecycle.MutableLiveData\r\nimport com.app.network_module.models.request.*\r\nimport com.app.network_module.models.response.*\r\nimport com.app.motory.dealer.utils.Constants\r\nimport com.app.motory.dealer.utils.Enums\r\nimport com.app.motory.dealer.utils.PusherChannelUtil\r\nimport com.app.network_module.models.pusher.PusherChannelEventPayload\r\nimport com.app.network_module.models.request.auction.RequestAuctionFavourite\r\nimport com.app.network_module.models.response.AuctionDetails.AuctionDetailsResponse\r\nimport com.app.network_module.models.response.auction_listing.ResponseAuctionListingItem\r\nimport com.app.network_module.models.response.inspectionDetails.CarInspectionDetailsResponse\r\nimport com.app.network_module.models.response.biddingHistory.BiddingHistoryResponse\r\nimport com.app.network_module.models.response.favourites.past.ResponseAuctionFavouritePast\r\nimport com.app.network_module.models.response.metaResponse.MetadataResponse\r\nimport com.app.network_module.models.response.mybids.live.ResponseMyBidLive\r\nimport com.app.network_module.models.response.mybids.lost.ResponseMyBidsLost\r\nimport com.app.network_module.models.response.mybids.won.ResponseMyBidsWon\r\nimport com.app.network_module.repository.ApiRepository\r\nimport com.app.network_module.repository.onError\r\nimport com.app.network_module.repository.onSuccess\r\nimport com.pusher.client.connection.ConnectionState\r\nimport kotlinx.coroutines.CoroutineScope\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.launch\r\nimport kotlinx.coroutines.withContext\r\nimport okhttp3.MultipartBody\r\n\r\ninternal class MainActivityViewModel : BaseViewModel() {\r\n\r\n    /*DATA SECTION*/\r\n\r\n    private var _filterUpcoming = Enums.InspectionType.NONE.key\r\n\r\n    var filterUpcoming: String\r\n        get() = _filterUpcoming\r\n        set(value) {\r\n            _filterUpcoming = value\r\n        }\r\n\r\n    private var _filterLive = Enums.InspectionType.NONE.key\r\n\r\n    val city = MutableLiveData<String>()\r\n\r\n    var filterLive: String\r\n        get() = _filterLive\r\n        set(value) {\r\n            _filterLive = value\r\n        }\r\n\r\n    private var _forceLogoutLiveData = MutableLiveData<Boolean>()\r\n    val forceLogoutLiveData: LiveData<Boolean>\r\n        get() = _forceLogoutLiveData\r\n\r\n    fun clearForceLogoutLiveData() {\r\n        _loginLiveData.value = null\r\n    }\r\n\r\n    private var _loginLiveData = MutableLiveData<LoginResponse>()\r\n    val loginLiveData: LiveData<LoginResponse>\r\n        get() = _loginLiveData\r\n\r\n    fun clearLoginData() {\r\n        _loginLiveData.value = null\r\n    }\r\n\r\n    private var _logoutLiveData = MutableLiveData<Any>()\r\n    val logoutLiveData: LiveData<Any>\r\n        get() = _logoutLiveData\r\n\r\n    fun clearLogoutData() {\r\n        _logoutLiveData.value = null\r\n    }\r\n\r\n    private var _signUpLiveData = MutableLiveData<Any>()\r\n    val signUpLiveData: LiveData<Any>\r\n        get() = _signUpLiveData\r\n\r\n    fun clearSignUpLiveData() {\r\n        _signUpLiveData.value = null\r\n    }\r\n\r\n    private var _verifyOtpLiveData = MutableLiveData<VerifyOtpResponse>()\r\n    val verifyOtpLiveData: LiveData<VerifyOtpResponse>\r\n        get() = _verifyOtpLiveData\r\n\r\n    fun clearVerifyOtpLiveData() {\r\n        _verifyOtpLiveData.value = null\r\n    }\r\n\r\n    private var _setPinLiveData = MutableLiveData<Any>()\r\n    val setPinLiveData: LiveData<Any>\r\n        get() = _setPinLiveData\r\n\r\n    fun clearSetPinLiveData() {\r\n        _setPinLiveData.value = null\r\n    }\r\n\r\n    private var _uploadLegalDocumentsLiveData = MutableLiveData<GenericSignUpResponse>()\r\n    val uploadLegalDocumentsLiveData: LiveData<GenericSignUpResponse>\r\n        get() = _uploadLegalDocumentsLiveData\r\n\r\n    fun clearUploadLegalDocumentsLiveData() {\r\n        _uploadLegalDocumentsLiveData.value = null\r\n    }\r\n\r\n    private var _resendOtpLiveData = MutableLiveData<Any>()\r\n    val resendOtpLiveData: LiveData<Any>\r\n        get() = _resendOtpLiveData\r\n\r\n    fun clearResendOtpLiveData() {\r\n        _resendOtpLiveData.value = null\r\n    }\r\n\r\n    private var _forgotPinLiveData = MutableLiveData<Any>()\r\n    val forgotPinLiveData: LiveData<Any>\r\n        get() = _forgotPinLiveData\r\n\r\n    fun clearForgotPinLiveData() {\r\n        _forgotPinLiveData.value = null\r\n    }\r\n\r\n    private var _verifyOtpForgotPinLiveData = MutableLiveData<Any>()\r\n    val verifyOtpForgotPinLiveData: LiveData<Any>\r\n        get() = _verifyOtpForgotPinLiveData\r\n\r\n    fun clearVerifyOtpForgotPinLiveData() {\r\n        _verifyOtpForgotPinLiveData.value = null\r\n    }\r\n\r\n    private var _setPinForgotPinLiveData = MutableLiveData<Any>()\r\n    val setPinForgotPinLiveData: LiveData<Any>\r\n        get() = _setPinForgotPinLiveData\r\n\r\n    fun clearSetPinForgotPinLiveData() {\r\n        _setPinForgotPinLiveData.value = null\r\n    }\r\n\r\n    private var _latestTermsLiveData = MutableLiveData<LatestTermsResponse>()\r\n    val latestTermsLiveData: LiveData<LatestTermsResponse>\r\n        get() = _latestTermsLiveData\r\n\r\n    fun clearLatestTermsLiveData() {\r\n        _latestTermsLiveData.value = null\r\n    }\r\n\r\n    private var _acceptTermsLiveData = MutableLiveData<GenericSignUpResponse>()\r\n    val acceptTermsLiveData: LiveData<GenericSignUpResponse>\r\n        get() = _acceptTermsLiveData\r\n\r\n    private val _responseAuctionListing = MutableLiveData<List<ResponseAuctionListingItem>>()\r\n\r\n    val responseAuctionListing: LiveData<List<ResponseAuctionListingItem>>\r\n        get() = _responseAuctionListing\r\n\r\n    private val _responseMyBidsWon = MutableLiveData<ResponseMyBidsWon>()\r\n\r\n    val responseMyBidsWon: LiveData<ResponseMyBidsWon>\r\n        get() = _responseMyBidsWon\r\n\r\n    private val _responseMyBidsLost = MutableLiveData<ResponseMyBidsLost>()\r\n\r\n    val responseMyBidsLost: LiveData<ResponseMyBidsLost>\r\n        get() = _responseMyBidsLost\r\n\r\n    private val _responseMyBidsLive = MutableLiveData<List<ResponseMyBidLive>>()\r\n\r\n    val responseMyBidsLive: LiveData<List<ResponseMyBidLive>>\r\n        get() = _responseMyBidsLive\r\n\r\n    private val _responseAuctionFavouritePast = MutableLiveData<ResponseAuctionFavouritePast>()\r\n\r\n    val responseAuctionFavouritePast: LiveData<ResponseAuctionFavouritePast>\r\n        get() = _responseAuctionFavouritePast\r\n\r\n    fun clearAcceptTermsLiveData() {\r\n        _acceptTermsLiveData.value = null\r\n    }\r\n\r\n    private var _metaDataLiveData = MutableLiveData<MetadataResponse>()\r\n    val metaDataLiveData: LiveData<MetadataResponse>\r\n        get() = _metaDataLiveData\r\n\r\n    fun clearMetaDataLiveData() {\r\n        _metaDataLiveData.value = null\r\n    }\r\n\r\n    private var _userProfileLiveData = MutableLiveData<UserProfileResponse>()\r\n    val userProfileLiveData: LiveData<UserProfileResponse>\r\n        get() = _userProfileLiveData\r\n\r\n    fun clearUserProfileLiveData() {\r\n        _userProfileLiveData.value = null\r\n    }\r\n\r\n    private var _notificationSettingsLiveData =\r\n        MutableLiveData<List<NotificationSettingsResponseItem>>()\r\n    val notificationSettingsLiveData: LiveData<List<NotificationSettingsResponseItem>>\r\n        get() = _notificationSettingsLiveData\r\n\r\n    fun clearNotificationSettingsData() {\r\n        _notificationSettingsLiveData.value = null\r\n    }\r\n\r\n    private var _inspectionDetailsLiveData = MutableLiveData<CarInspectionDetailsResponse>()\r\n    val inspectionDetailsLiveData: LiveData<CarInspectionDetailsResponse>\r\n        get() = _inspectionDetailsLiveData\r\n\r\n    fun clearInspectionDetailsLiveData() {\r\n        _inspectionDetailsLiveData.value = null\r\n    }\r\n\r\n    private var _auctionDetailsLiveData = MutableLiveData<AuctionDetailsResponse>()\r\n    val auctionDetailsLiveData: LiveData<AuctionDetailsResponse>\r\n        get() = _auctionDetailsLiveData\r\n\r\n    fun clearAuctionDetailsLiveData() {\r\n        _auctionDetailsLiveData.value = null\r\n    }\r\n\r\n    private var _postNotificationsSettingsLiveData = MutableLiveData<Any>()\r\n    val postNotificationsSettingsLiveData: LiveData<Any>\r\n        get() = _postNotificationsSettingsLiveData\r\n\r\n    fun clearNotificationsSettingsData() {\r\n        _postNotificationsSettingsLiveData.value = null\r\n    }\r\n\r\n    private val _biddingHistoryLiveData = MutableLiveData<List<BiddingHistoryResponse>>()\r\n    val biddingHistoryLiveData: LiveData<List<BiddingHistoryResponse>>\r\n        get() = _biddingHistoryLiveData\r\n\r\n    private var _postChangePinLiveData = MutableLiveData<Any>()\r\n    val postChangePinLiveData: LiveData<Any>\r\n        get() = _postChangePinLiveData\r\n\r\n    fun clearChangePinData() {\r\n        _postChangePinLiveData.value = null\r\n    }\r\n\r\n    fun clearBiddingHistoryLiveData() {\r\n        _biddingHistoryLiveData.value = null\r\n    }\r\n\r\n    private var _changeLanguageLiveData = MutableLiveData<Any>()\r\n    val changeLanguageLiveData: LiveData<Any>\r\n        get() = _changeLanguageLiveData\r\n\r\n    fun clearChangeLanguageLiveData() {\r\n        _changeLanguageLiveData.value = null\r\n    }\r\n\r\n    private var _markFavLiveData = MutableLiveData<Any>()\r\n    val markFavLiveData: LiveData<Any>\r\n        get() = _markFavLiveData\r\n\r\n    fun clearMarkFavLiveData() {\r\n        _markFavLiveData.value = null\r\n    }\r\n\r\n    private var _submitBidLiveData = MutableLiveData<SubmitBidResponse>()\r\n    val submitBidLiveData: LiveData<SubmitBidResponse>\r\n        get() = _submitBidLiveData\r\n\r\n    fun clearSubmitBidLiveData() {\r\n        _submitBidLiveData.value = null\r\n    }\r\n\r\n    private var _buyNowLiveData = MutableLiveData<Any>()\r\n    val buyNowLiveData: LiveData<Any>\r\n        get() = _buyNowLiveData\r\n\r\n    fun clearBuyNowLiveData() {\r\n        _buyNowLiveData.value = null\r\n    }\r\n\r\n    /*API SECTION*/\r\n\r\n    fun setForceLogout(isAuthError: Boolean) {\r\n        _forceLogoutLiveData.postValue(isAuthError)\r\n    }\r\n\r\n    fun callServerForGetAuctionListing() {\r\n\r\n        coroutineScope.launch {\r\n\r\n            val flag = _responseAuctionListing.value == null\r\n\r\n            if (flag) {\r\n                toggleLoader(true)\r\n            }\r\n\r\n\r\n            val data = ApiRepository.callGetAuctionListing()\r\n\r\n            data.onSuccess {\r\n                if (it.isSuccessful && it.body()?.status_code == Constants.API_RESPONSE_CODE_200) {\r\n                    withContext(Dispatchers.Main) {\r\n                        _responseAuctionListing.value = it.body()?.data\r\n                    }\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_401) {\r\n                    handleServerError(it.body()?.errors as ArrayList<String>)\r\n                    setForceLogout(true)\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_500) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                } else {\r\n                    handleServerError(it.body()?.errors as ArrayList<String>)\r\n                }\r\n\r\n            }.onError {\r\n                showErrorMessage(it.exception)\r\n            }\r\n\r\n            if (flag) {\r\n                toggleLoader(false)\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    fun callServerForPostAuctionFavourite(\r\n        requestAuctionFavourite: RequestAuctionFavourite,\r\n        auctionType: Enums.AuctionListingFragmentType\r\n    ) {\r\n\r\n        coroutineScope.launch {\r\n\r\n            toggleLoader(true)\r\n\r\n            val data = ApiRepository.callPostAuctionFavourite(requestAuctionFavourite)\r\n\r\n            data.onSuccess {\r\n                if (it.isSuccessful && it.body()?.status_code == Constants.API_RESPONSE_CODE_200) {\r\n                    withContext(Dispatchers.Main) {\r\n\r\n                        when (auctionType) {\r\n\r\n                            Enums.AuctionListingFragmentType.HOME_LIVE_AUCTIONS,\r\n                            Enums.AuctionListingFragmentType.HOME_UPCOMING_AUCTIONS,\r\n                            Enums.AuctionListingFragmentType.MY_BIDS_LIVE,\r\n                            Enums.AuctionListingFragmentType.FAVOURITE_CURRENT_AUCTIONS,\r\n                            Enums.AuctionListingFragmentType.FAVOURITE_UPCOMING_AUCTIONS -> {\r\n\r\n                                _responseAuctionListing.value?.apply {\r\n                                    find {\r\n                                        it.auctionId?.toInt() == requestAuctionFavourite.auctionId\r\n                                    }?.let {\r\n                                        it.favourite =\r\n                                            if (requestAuctionFavourite.favourite) \"1\" else \"0\"\r\n                                    }\r\n                                    _responseAuctionListing.value = this\r\n\r\n                                }\r\n\r\n                                _responseMyBidsLive.value?.apply {\r\n                                    find {\r\n                                        it.auctionId?.toInt() == requestAuctionFavourite.auctionId\r\n                                    }?.let {\r\n                                        it.favourite =\r\n                                            if (requestAuctionFavourite.favourite) \"1\" else \"0\"\r\n                                    }\r\n\r\n                                    _responseMyBidsLive.value = this\r\n\r\n                                }\r\n\r\n                            }\r\n\r\n                            Enums.AuctionListingFragmentType.MY_BIDS_WON,\r\n                            Enums.AuctionListingFragmentType.MY_BIDS_LOST,\r\n                            Enums.AuctionListingFragmentType.FAVOURITE_PAST_AUCTIONS -> {\r\n\r\n                                _responseMyBidsWon.value?.items?.apply {\r\n                                    find {\r\n                                        it.auctionId?.toInt() == requestAuctionFavourite.auctionId\r\n                                    }.let {\r\n\r\n                                        if (it != null) {\r\n                                            it.favourite =\r\n                                                if (requestAuctionFavourite.favourite) \"1\" else \"0\"\r\n\r\n                                            _responseMyBidsWon.value = _responseMyBidsWon.value\r\n\r\n\r\n                                        } else if (auctionType == Enums.AuctionListingFragmentType.FAVOURITE_PAST_AUCTIONS) {\r\n                                            callServerForMyBidWonListing()\r\n                                        }\r\n\r\n                                    }\r\n\r\n\r\n                                }\r\n\r\n                                _responseMyBidsLost.value?.items?.apply {\r\n                                    find {\r\n                                        it.auctionId?.toInt() == requestAuctionFavourite.auctionId\r\n                                    }.let {\r\n                                        if (it != null) {\r\n                                            it.favourite =\r\n                                                if (requestAuctionFavourite.favourite) \"1\" else \"0\"\r\n\r\n\r\n                                            _responseMyBidsLost.value = _responseMyBidsLost.value\r\n\r\n\r\n                                        } else if (auctionType == Enums.AuctionListingFragmentType.FAVOURITE_PAST_AUCTIONS) {\r\n                                            callServerForMyBidLostListing()\r\n                                        }\r\n                                    }\r\n\r\n                                }\r\n\r\n                                _responseAuctionFavouritePast.value?.items?.apply {\r\n                                    find {\r\n                                        it.auctionId?.toInt() == requestAuctionFavourite.auctionId\r\n                                    }.let {\r\n                                        if (it != null) {\r\n                                            it.favourite =\r\n                                                if (requestAuctionFavourite.favourite) \"1\" else \"0\"\r\n\r\n\r\n                                            _responseAuctionFavouritePast.value =\r\n                                                _responseAuctionFavouritePast.value\r\n\r\n                                        } else if (auctionType == Enums.AuctionListingFragmentType.MY_BIDS_WON || auctionType == Enums.AuctionListingFragmentType.MY_BIDS_LOST) {\r\n                                            callServerForAuctionFavouritePast()\r\n                                        }\r\n                                    }\r\n\r\n                                }\r\n\r\n                            }\r\n                        }\r\n                    }\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_401) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                    setForceLogout(true)\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_500) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                } else {\r\n                    handleServerError(it.body()?.errors as ArrayList<String>)\r\n                }\r\n\r\n            }.onError {\r\n                showErrorMessage(it.exception)\r\n            }\r\n            toggleLoader(false)\r\n        }\r\n\r\n    }\r\n\r\n    fun markAuctionAsFavourite(\r\n        requestAuctionFavourite: RequestAuctionFavourite\r\n    ) {\r\n\r\n        coroutineScope.launch {\r\n\r\n            toggleLoader(true)\r\n            val data = ApiRepository.callPostAuctionFavourite(requestAuctionFavourite)\r\n            data.onSuccess {\r\n                if (it.isSuccessful && it.body()?.status_code == Constants.API_RESPONSE_CODE_200) {\r\n                    _markFavLiveData.postValue(it.body()?.data)\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_401) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                    setForceLogout(true)\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_500) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                } else {\r\n                    handleServerError(it.body()?.errors as ArrayList<String>)\r\n                }\r\n\r\n            }.onError {\r\n                showErrorMessage(it.exception)\r\n            }\r\n\r\n            toggleLoader(false)\r\n\r\n        }\r\n\r\n    }\r\n\r\n    fun callServerForMyBidWonListing(callPagination: Boolean = false) {\r\n\r\n        coroutineScope.launch {\r\n\r\n            val flag = _responseMyBidsWon.value == null\r\n\r\n            if (flag) {\r\n                toggleLoader(true)\r\n            }\r\n\r\n\r\n            val data =\r\n                if (callPagination) ApiRepository.callGetMyBidsWon(\r\n                    _responseMyBidsWon.value?.pagination?.next ?: \"\"\r\n                ) else ApiRepository.callGetMyBidsWon()\r\n\r\n            data.onSuccess {\r\n                if (it.isSuccessful && it.body()?.status_code == Constants.API_RESPONSE_CODE_200) {\r\n                    withContext(Dispatchers.Main) {\r\n\r\n                        if (callPagination) {\r\n\r\n                            val oldList = _responseMyBidsWon.value?.items\r\n                            val newList = it.body()?.data?.items\r\n\r\n                            if (oldList != null && newList != null) {\r\n                                val mergeList = oldList + newList\r\n\r\n                                it.body()?.data?.items = mergeList\r\n\r\n                                _responseMyBidsWon.value = it.body()?.data\r\n\r\n                            }\r\n\r\n\r\n                        } else {\r\n                            _responseMyBidsWon.value = it.body()?.data\r\n                        }\r\n\r\n                    }\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_401) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                    setForceLogout(true)\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_500) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                } else {\r\n                    handleServerError(it.body()?.errors as ArrayList<String>)\r\n                }\r\n\r\n            }.onError {\r\n                showErrorMessage(it.exception)\r\n            }\r\n\r\n            if (flag) {\r\n                toggleLoader(false)\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    fun callServerForMyBidLostListing(callPagination: Boolean = false) {\r\n\r\n        coroutineScope.launch {\r\n\r\n            val flag = _responseMyBidsLost.value == null\r\n\r\n            if (flag) {\r\n                toggleLoader(true)\r\n            }\r\n\r\n            val data =\r\n                if (callPagination) ApiRepository.callGetMyBidsLost(\r\n                    _responseMyBidsLost.value?.pagination?.next ?: \"\"\r\n                ) else ApiRepository.callGetMyBidsLost()\r\n\r\n            data.onSuccess {\r\n                if (it.isSuccessful && it.body()?.status_code == Constants.API_RESPONSE_CODE_200) {\r\n                    withContext(Dispatchers.Main) {\r\n\r\n                        if (callPagination) {\r\n\r\n                            val oldList = _responseMyBidsLost.value?.items\r\n                            val newList = it.body()?.data?.items\r\n\r\n                            if (oldList != null && newList != null) {\r\n                                val mergeList = oldList + newList\r\n\r\n                                it.body()?.data?.items = mergeList\r\n\r\n                                _responseMyBidsLost.value = it.body()?.data\r\n\r\n                            }\r\n\r\n                        } else {\r\n                            _responseMyBidsLost.value = it.body()?.data\r\n                        }\r\n\r\n                    }\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_401) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                    setForceLogout(true)\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_500) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                } else {\r\n                    handleServerError(it.body()?.errors as ArrayList<String>)\r\n                }\r\n\r\n            }.onError {\r\n                showErrorMessage(it.exception)\r\n            }\r\n\r\n            if (flag) {\r\n                toggleLoader(false)\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    fun callServerForMyBidLiveListing() {\r\n\r\n        coroutineScope.launch {\r\n\r\n            val flag = _responseMyBidsLive.value == null\r\n\r\n            if (flag) {\r\n                toggleLoader(true)\r\n            }\r\n\r\n\r\n            val data = ApiRepository.callGetMyBidsLive()\r\n\r\n            data.onSuccess {\r\n                if (it.isSuccessful && it.body()?.status_code == Constants.API_RESPONSE_CODE_200) {\r\n                    withContext(Dispatchers.Main) {\r\n                        _responseMyBidsLive.value = it.body()?.data\r\n                    }\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_401) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                    setForceLogout(true)\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_500) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                } else {\r\n                    handleServerError(it.body()?.errors as ArrayList<String>)\r\n                }\r\n\r\n            }.onError {\r\n                showErrorMessage(it.exception)\r\n            }\r\n\r\n            if (flag) {\r\n                toggleLoader(false)\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    fun callServerForAuctionFavouritePast(callPagination: Boolean = false) {\r\n\r\n        coroutineScope.launch {\r\n\r\n            val flag = _responseAuctionFavouritePast.value == null\r\n\r\n            if (flag) {\r\n                toggleLoader(true)\r\n            }\r\n\r\n\r\n            val data =\r\n                if (callPagination) ApiRepository.callGetAuctionFavouritePast(\r\n                    _responseAuctionFavouritePast.value?.pagination?.next ?: \"\"\r\n                ) else ApiRepository.callGetAuctionFavouritePast()\r\n\r\n            data.onSuccess {\r\n                if (it.isSuccessful && it.body()?.status_code == Constants.API_RESPONSE_CODE_200) {\r\n                    withContext(Dispatchers.Main) {\r\n\r\n                        if (callPagination) {\r\n\r\n                            val oldList = _responseAuctionFavouritePast.value?.items\r\n                            val newList = it.body()?.data?.items\r\n\r\n                            if (oldList != null && newList != null) {\r\n                                val mergeList = oldList + newList\r\n\r\n                                it.body()?.data?.items = mergeList\r\n\r\n                                _responseAuctionFavouritePast.value = it.body()?.data\r\n\r\n                            }\r\n\r\n                        } else {\r\n                            _responseAuctionFavouritePast.value = it.body()?.data\r\n                        }\r\n\r\n                    }\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_401) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                    setForceLogout(true)\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_500) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                } else {\r\n                    handleServerError(it.body()?.errors as ArrayList<String>)\r\n                }\r\n\r\n            }.onError {\r\n                showErrorMessage(it.exception)\r\n            }\r\n\r\n            if (flag) {\r\n                toggleLoader(false)\r\n            }\r\n\r\n            toggleLoader(false)\r\n        }\r\n\r\n    }\r\n\r\n    fun loginUser(\r\n        countryCode: String,\r\n        mobileNum: String,\r\n        pin: String,\r\n        deviceId: String,\r\n        deviceToken: String\r\n    ) {\r\n\r\n        val apiRequest = LoginRequest(\r\n            countryCode,\r\n            deviceId,\r\n            deviceToken,\r\n            mobileNum,\r\n            pin\r\n        )\r\n\r\n        coroutineScope.launch {\r\n            toggleLoader(true)\r\n            val data = ApiRepository.loginUser(apiRequest)\r\n            data.onSuccess {\r\n                if (it.isSuccessful && it.body()?.status_code == Constants.API_RESPONSE_CODE_200) {\r\n                    if (it.body() != null) {\r\n                        try {\r\n                            _loginLiveData.postValue(it.body()?.data) //= it.body()?.data\r\n                        } catch (t: Throwable) {\r\n                            Log.d(\"Error\", t.message)\r\n                        }\r\n\r\n                    }\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_401) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                    setForceLogout(true)\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_500) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                } else {\r\n                    handleServerError(it.body()?.errors as ArrayList<String>)\r\n                }\r\n\r\n            }.onError {\r\n                showErrorMessage(it.exception)\r\n            }\r\n            toggleLoader(false)\r\n        }\r\n    }\r\n\r\n    fun logoutUser(\r\n        apiRequest: LogoutRequest\r\n    ) {\r\n\r\n        coroutineScope.launch {\r\n            toggleLoader(true)\r\n            val data = ApiRepository.logoutUser(apiRequest)\r\n            data.onSuccess {\r\n                if (it.isSuccessful && it.code() == Constants.API_RESPONSE_CODE_200) {\r\n                    if (it.body() != null) {\r\n                        _logoutLiveData.postValue(it.body()?.data)\r\n                    }\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_401) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                    setForceLogout(true)\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_500) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                } else {\r\n                    handleServerError(it.body()?.errors as ArrayList<String>)\r\n                }\r\n\r\n            }.onError {\r\n                showErrorMessage(it.exception)\r\n            }\r\n            toggleLoader(false)\r\n        }\r\n    }\r\n\r\n    fun signUpUser(apiRequest: SignUpRequest) {\r\n\r\n        coroutineScope.launch {\r\n            toggleLoader(true)\r\n            val data = ApiRepository.signupUser(apiRequest)\r\n            data.onSuccess {\r\n                if (it.isSuccessful && it.body()?.status_code == 200) {\r\n                    if (it.body() != null) {\r\n//                            withContext(Dispatchers.Main) {\r\n////                            if(it.code())\r\n//                                _signUpLiveData.value = it.body()?.data\r\n//                            }\r\n                        _signUpLiveData.postValue(it.body()?.data)\r\n                    }\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_401) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                    setForceLogout(true)\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_500) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                } else {\r\n                    handleServerError(it.body()?.errors as ArrayList<String>)\r\n                }\r\n\r\n            }.onError {\r\n                showErrorMessage(it.exception)\r\n            }\r\n            toggleLoader(false)\r\n        }\r\n    }\r\n\r\n    fun verifyOtp(apiRequest: VerifyOtpRequest) {\r\n\r\n        coroutineScope.launch {\r\n            toggleLoader(true)\r\n            val data = ApiRepository.verifyOtp(apiRequest)\r\n            data.onSuccess {\r\n                if (it.isSuccessful && it.body()?.status_code == 200) {\r\n                    if (it.body() != null) {\r\n//                            withContext(Dispatchers.Main) {\r\n////                            if(it.code())\r\n//                                _verifyOtpLiveData.value = it.body()?.data\r\n//                            }\r\n                        _verifyOtpLiveData.postValue(it.body()?.data)\r\n                    }\r\n\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_401) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                    setForceLogout(true)\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_500) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                } else {\r\n                    handleServerError(it.body()?.errors as ArrayList<String>)\r\n                }\r\n\r\n            }.onError {\r\n                showErrorMessage(it.exception)\r\n            }\r\n            toggleLoader(false)\r\n        }\r\n    }\r\n\r\n    fun setPin(apiRequest: SetPinRequest) {\r\n\r\n        coroutineScope.launch {\r\n            toggleLoader(true)\r\n            val data = ApiRepository.setUserPin(apiRequest)\r\n            data.onSuccess {\r\n                if (it.isSuccessful && it.body()?.status_code == 200) {\r\n                    if (it.body() != null) {\r\n//                            withContext(Dispatchers.Main) {\r\n////                            if(it.code())\r\n//                                _setPinLiveData.value = it.body()?.data\r\n//                            }\r\n                        _setPinLiveData.postValue(it.body()?.data)\r\n                    }\r\n\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_401) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                    setForceLogout(true)\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_500) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                } else {\r\n                    handleServerError(it.body()?.errors as ArrayList<String>)\r\n                }\r\n\r\n            }.onError {\r\n                showErrorMessage(it.exception)\r\n            }\r\n            toggleLoader(false)\r\n        }\r\n    }\r\n\r\n    fun uploadLegalDocuments(\r\n        companyName: String,\r\n        iban: String,\r\n        location: String,\r\n        nationalIdImage: List<MultipartBody.Part>?,\r\n        licenseImage: List<MultipartBody.Part>?,\r\n        crImage: List<MultipartBody.Part>?\r\n    ) {\r\n\r\n        coroutineScope.launch {\r\n            toggleLoader(true)\r\n            val data = ApiRepository.uploadLegalDocuments(\r\n                companyName,\r\n                iban,\r\n                location,\r\n                nationalIdImage,\r\n                licenseImage,\r\n                crImage\r\n            )\r\n            data.onSuccess {\r\n                if (it.isSuccessful && it.body()?.status_code == 200) {\r\n                    if (it.body() != null) {\r\n//                            withContext(Dispatchers.Main) {\r\n////                            if(it.code())\r\n//                                _uploadLegalDocumentsLiveData.value = it.body()?.data\r\n//                            }\r\n                        _uploadLegalDocumentsLiveData.postValue(it.body()?.data)\r\n                    }\r\n\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_401) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                    setForceLogout(true)\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_500) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                } else {\r\n                    handleServerError(it.body()?.errors as ArrayList<String>)\r\n                }\r\n\r\n            }.onError {\r\n                showErrorMessage(it.exception)\r\n            }\r\n            toggleLoader(false)\r\n        }\r\n    }\r\n\r\n    fun resendOtp(apiRequest: ResendOtpRequest) {\r\n\r\n        coroutineScope.launch {\r\n            toggleLoader(true)\r\n            val data = ApiRepository.resendOtp(apiRequest)\r\n            data.onSuccess {\r\n                if (it.isSuccessful && it.body()?.status_code == 200) {\r\n//                    if (it.body() != null) {\r\n////                            withContext(Dispatchers.Main) {\r\n//////                            if(it.code())\r\n////                                _resendOtpLiveData.value = it.body()?.data\r\n////                            }\r\n//                    }\r\n                    _resendOtpLiveData.postValue(it.body()?.data)\r\n\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_401) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                    setForceLogout(true)\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_500) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                } else {\r\n                    handleServerError(it.body()?.errors as ArrayList<String>)\r\n                }\r\n\r\n            }.onError {\r\n                showErrorMessage(it.exception)\r\n            }\r\n            toggleLoader(false)\r\n        }\r\n    }\r\n\r\n    fun forgotPin(apiRequest: ResendOtpRequest) {\r\n\r\n        coroutineScope.launch {\r\n            toggleLoader(true)\r\n            val data = ApiRepository.forgotPin(apiRequest)\r\n            data.onSuccess {\r\n                if (it.isSuccessful && it.body()?.status_code == 200) {\r\n                    if (it.body() != null) {\r\n//                            withContext(Dispatchers.Main) {\r\n////                            if(it.code())\r\n//                                _forgotPinLiveData.value = it.body()?.data\r\n//                            }\r\n                        _forgotPinLiveData.postValue(it.body()?.data)\r\n                    }\r\n\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_401) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                    setForceLogout(true)\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_500) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                } else {\r\n                    handleServerError(it.body()?.errors as ArrayList<String>)\r\n                }\r\n\r\n            }.onError {\r\n                showErrorMessage(it.exception)\r\n            }\r\n            toggleLoader(false)\r\n        }\r\n    }\r\n\r\n    fun forgotPinVerifyOtp(apiRequest: VerifyOtpForgotPinRequest) {\r\n\r\n        coroutineScope.launch {\r\n//            toggleLoader(true)\r\n            val data = ApiRepository.forgotPinVerifyOtp(apiRequest)\r\n            data.onSuccess {\r\n                if (it.isSuccessful && it.body()?.status_code == 200) {\r\n                    if (it.body() != null) {\r\n//                            withContext(Dispatchers.Main) {\r\n////                            if(it.code())\r\n//                                _verifyOtpForgotPinLiveData.value = it.body()?.data\r\n//                            }\r\n                        _verifyOtpForgotPinLiveData.postValue(it.body()?.data)\r\n                    }\r\n\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_401) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                    setForceLogout(true)\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_500) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                } else {\r\n                    handleServerError(it.body()?.errors as ArrayList<String>)\r\n                }\r\n\r\n            }.onError {\r\n                showErrorMessage(it.exception)\r\n            }\r\n//            toggleLoader(false)\r\n        }\r\n    }\r\n\r\n    fun forgotPinSetPin(apiRequest: SetPinForgotPinRequest) {\r\n\r\n        coroutineScope.launch {\r\n            toggleLoader(true)\r\n            val data = ApiRepository.setPinforForgotPin(apiRequest)\r\n            data.onSuccess {\r\n                if (it.isSuccessful && it.body()?.status_code == 200) {\r\n                    if (it.body() != null) {\r\n//                            withContext(Dispatchers.Main) {\r\n////                            if(it.code())\r\n//                                _setPinForgotPinLiveData.value = it.body()?.data\r\n//                            }\r\n                        _setPinForgotPinLiveData.postValue(it.body()?.data)\r\n                    }\r\n\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_401) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                    setForceLogout(true)\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_500) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                } else {\r\n                    handleServerError(it.body()?.errors as ArrayList<String>)\r\n                }\r\n\r\n            }.onError {\r\n                showErrorMessage(it.exception)\r\n            }\r\n            toggleLoader(false)\r\n        }\r\n    }\r\n\r\n    fun getLatestTerms() {\r\n\r\n        coroutineScope.launch {\r\n            toggleLoader(true)\r\n            val data = ApiRepository.getLatestTerms()\r\n            data.onSuccess {\r\n                if (it.isSuccessful && it.body()?.status_code == 200) {\r\n                    if (it.body() != null) {\r\n//                            withContext(Dispatchers.Main) {\r\n////                            if(it.code())\r\n//                                _latestTermsLiveData.value = it.body()?.data\r\n//                            }\r\n                        _latestTermsLiveData.postValue(it.body()?.data)\r\n                    }\r\n\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_401) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                    setForceLogout(true)\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_500) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                } else {\r\n                    handleServerError(it.body()?.errors as ArrayList<String>)\r\n                }\r\n\r\n            }.onError {\r\n                showErrorMessage(it.exception)\r\n            }\r\n            toggleLoader(false)\r\n        }\r\n    }\r\n\r\n    fun acceptTerms(request: AcceptTermsRequest) {\r\n\r\n        coroutineScope.launch {\r\n            toggleLoader(true)\r\n            val data = ApiRepository.acceptTerms(request)\r\n            data.onSuccess {\r\n                if (it.isSuccessful && it.body()?.status_code == 200) {\r\n                    if (it.body() != null) {\r\n//                            withContext(Dispatchers.Main) {\r\n////                            if(it.code())\r\n//                                _acceptTermsLiveData.value = it.body()?.data\r\n//                            }\r\n                        _acceptTermsLiveData.postValue(it.body()?.data)\r\n                    }\r\n\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_401) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                    setForceLogout(true)\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_500) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                } else {\r\n                    handleServerError(it.body()?.errors as ArrayList<String>)\r\n                }\r\n\r\n            }.onError {\r\n                showErrorMessage(it.exception)\r\n            }\r\n            toggleLoader(false)\r\n        }\r\n    }\r\n\r\n    fun getMetaDatafromServer() {\r\n\r\n        coroutineScope.launch {\r\n            // toggleLoader(true)\r\n            val data = ApiRepository.getMetaData()\r\n            data.onSuccess {\r\n                if (it.isSuccessful && it.body()?.status_code == 200) {\r\n                    if (it.body() != null) {\r\n                        _metaDataLiveData.postValue(it.body()?.data)\r\n                    }\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_401) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                    setForceLogout(true)\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_500) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                } else {\r\n                    handleServerError(it.body()?.errors as ArrayList<String>)\r\n                }\r\n\r\n            }.onError {\r\n                showErrorMessage(it.exception)\r\n            }\r\n//            toggleLoader(false)\r\n        }\r\n    }\r\n\r\n    fun getUserProfile() {\r\n\r\n        coroutineScope.launch {\r\n//            toggleLoader(true)\r\n            val data = ApiRepository.getUserProfile()\r\n            data.onSuccess {\r\n                if (it.isSuccessful && it.body()?.status_code == 200) {\r\n                    _userProfileLiveData.postValue(it.body()?.data)\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_401) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                    setForceLogout(true)\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_500) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                } else {\r\n                    handleServerError(it.body()?.errors as ArrayList<String>)\r\n                }\r\n\r\n            }.onError {\r\n                showErrorMessage(it.exception)\r\n            }\r\n//            toggleLoader(false)\r\n        }\r\n    }\r\n\r\n    fun getNotificationSettings() {\r\n\r\n        coroutineScope.launch {\r\n            toggleLoader(true)\r\n            val data = ApiRepository.getNotificationSettings()\r\n            data.onSuccess {\r\n                if (it.isSuccessful && it.body()?.status_code == 200) {\r\n                    if (it.body() != null) {\r\n                        _notificationSettingsLiveData.postValue(it.body()?.data)\r\n                    }\r\n\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_401) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                    setForceLogout(true)\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_500) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                } else {\r\n                    handleServerError(it.body()?.errors as ArrayList<String>)\r\n                }\r\n\r\n            }.onError {\r\n                showErrorMessage(it.exception)\r\n            }\r\n            toggleLoader(false)\r\n        }\r\n    }\r\n\r\n    fun getInspectionDetails(id: Int) {\r\n\r\n        coroutineScope.launch {\r\n            toggleLoader(true)\r\n            val data = ApiRepository.getInspectionDetails(id)\r\n            data.onSuccess {\r\n                if (it.isSuccessful && it.body()?.status_code == 200) {\r\n                    if (it.body() != null) {\r\n                        _inspectionDetailsLiveData.postValue(it.body()?.data)\r\n                    }\r\n\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_401) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                    setForceLogout(true)\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_500) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                } else {\r\n                    handleServerError(it.body()?.errors as ArrayList<String>)\r\n                }\r\n\r\n            }.onError {\r\n                showErrorMessage(it.exception)\r\n            }\r\n            toggleLoader(false)\r\n        }\r\n    }\r\n\r\n    fun getAuctionDetails(id: Int) {\r\n\r\n        coroutineScope.launch {\r\n            toggleLoader(true)\r\n            val data = ApiRepository.getAuctionDetails(id)\r\n            data.onSuccess {\r\n                if (it.isSuccessful && it.body()?.status_code == 200) {\r\n                    if (it.body() != null) {\r\n                        _auctionDetailsLiveData.postValue(it.body()?.data)\r\n                    }\r\n\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_401) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                    setForceLogout(true)\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_500) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                } else {\r\n                    handleServerError(it.body()?.errors as ArrayList<String>)\r\n                }\r\n\r\n            }.onError {\r\n                showErrorMessage(it.exception)\r\n            }\r\n            toggleLoader(false)\r\n        }\r\n    }\r\n\r\n    //\r\n    fun postNotificationsSettings(request: NotificationsSettingsRequest) {\r\n\r\n        coroutineScope.launch {\r\n            toggleLoader(true)\r\n            val data = ApiRepository.postNotificationsSettings(request)\r\n            data.onSuccess {\r\n                if (it.isSuccessful && it.body()?.status_code == 200) {\r\n                    if (it.body() != null) {\r\n//                            withContext(Dispatchers.Main) {\r\n////                            if(it.code())\r\n//                                _acceptTermsLiveData.value = it.body()?.data\r\n//                            }\r\n                        _postNotificationsSettingsLiveData.postValue(it.body()?.data)\r\n                    }\r\n\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_401) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                    setForceLogout(true)\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_500) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                } else {\r\n                    handleServerError(it.body()?.errors as ArrayList<String>)\r\n                }\r\n\r\n            }.onError {\r\n                showErrorMessage(it.exception)\r\n            }\r\n            toggleLoader(false)\r\n        }\r\n    }\r\n\r\n    fun postChangePin(request: ChangePinRequest) {\r\n\r\n        coroutineScope.launch {\r\n            toggleLoader(true)\r\n            val data = ApiRepository.postChangePin(request)\r\n            data.onSuccess {\r\n                if (it.isSuccessful && it.body()?.status_code == 200) {\r\n                    if (it.body() != null) {\r\n//                            withContext(Dispatchers.Main) {\r\n////                            if(it.code())\r\n//                                _acceptTermsLiveData.value = it.body()?.data\r\n//                            }\r\n                        _postChangePinLiveData.postValue(it.body()?.data)\r\n                    }\r\n\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_401) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                    setForceLogout(true)\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_500) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                } else {\r\n                    handleServerError(it.body()?.errors as ArrayList<String>)\r\n                }\r\n\r\n            }.onError {\r\n                showErrorMessage(it.exception)\r\n            }\r\n            toggleLoader(false)\r\n        }\r\n    }\r\n\r\n    fun getBiddingHistory(auctionId: Int) {\r\n\r\n        coroutineScope.launch {\r\n            toggleLoader(true)\r\n            val data = ApiRepository.getBiddingHistory(auctionId)\r\n            data.onSuccess {\r\n                if (it.isSuccessful && it.body()?.status_code == 200) {\r\n                    if (it.body() != null) {\r\n//                            withContext(Dispatchers.Main) {\r\n////                            if(it.code())\r\n//                                _acceptTermsLiveData.value = it.body()?.data\r\n//                            }\r\n                        _biddingHistoryLiveData.postValue(it.body()?.data)\r\n                    }\r\n\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_401) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                    setForceLogout(true)\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_500) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                } else {\r\n                    handleServerError(it.body()?.errors as ArrayList<String>)\r\n                }\r\n\r\n            }.onError {\r\n                showErrorMessage(it.exception)\r\n            }\r\n            toggleLoader(false)\r\n        }\r\n    }\r\n\r\n    //\r\n    fun changeLanguage(request: ChangeLanguageRequest) {\r\n\r\n        coroutineScope.launch {\r\n            // toggleLoader(true)\r\n            val data = ApiRepository.changeLanguage(request)\r\n            data.onSuccess {\r\n                if (it.isSuccessful && it.body()?.status_code == 200) {\r\n                    if (it.body() != null) {\r\n//                            withContext(Dispatchers.Main) {\r\n////                            if(it.code())\r\n//                                _acceptTermsLiveData.value = it.body()?.data\r\n//                            }\r\n                        _changeLanguageLiveData.postValue(it.body()?.data)\r\n                    }\r\n\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_401) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                    setForceLogout(true)\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_500) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                } else {\r\n                    handleServerError(it.body()?.errors as ArrayList<String>)\r\n                }\r\n\r\n            }.onError {\r\n                showErrorMessage(it.exception)\r\n            }\r\n            //toggleLoader(false)\r\n        }\r\n    }\r\n\r\n    fun placeBid(request: SubmitBidRequest) {\r\n\r\n        coroutineScope.launch {\r\n            toggleLoader(true)\r\n            val data = ApiRepository.submitBid(request)\r\n            data.onSuccess {\r\n                if (it.isSuccessful && it.body()?.status_code == 200) {\r\n                    if (it.body() != null) {\r\n                        _submitBidLiveData.postValue(it.body()?.data)\r\n                    }\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_401) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                    setForceLogout(true)\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_500) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                } else {\r\n                    handleServerError(it.body()?.errors as ArrayList<String>)\r\n                }\r\n\r\n            }.onError {\r\n                showErrorMessage(it.exception)\r\n            }\r\n            toggleLoader(false)\r\n        }\r\n    }\r\n\r\n    fun buyCarNow(request: BuyNowRequest) {\r\n\r\n        coroutineScope.launch {\r\n            toggleLoader(true)\r\n            val data = ApiRepository.buyNow(request)\r\n            data.onSuccess {\r\n                if (it.isSuccessful && it.body()?.status_code == 200) {\r\n                    if (it.body() != null) {\r\n                        _buyNowLiveData.postValue(it.body()?.data)\r\n                    }\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_401) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                    setForceLogout(true)\r\n                } else if (it.code() == Constants.API_RESPONSE_CODE_500) {\r\n                    handleServerError(arrayListOf(it.message()))\r\n                } else {\r\n                    handleServerError(it.body()?.errors as ArrayList<String>)\r\n                }\r\n\r\n            }.onError {\r\n                showErrorMessage(it.exception)\r\n            }\r\n            toggleLoader(false)\r\n        }\r\n    }\r\n\r\n    public override suspend fun toggleLoader(flag: Boolean) {\r\n        super.toggleLoader(flag)\r\n    }\r\n\r\n\r\n    fun onCitySelect(cityName: String) {\r\n        city.value = cityName\r\n\r\n    }\r\n\r\n    // PUSHER LIVE DATA AND FUNCTIONS\r\n\r\n    private val _pusherConnectionState = MutableLiveData<ConnectionState>()\r\n    val pusherConnectionState: LiveData<ConnectionState>\r\n        get() = _pusherConnectionState\r\n\r\n    private fun setPusherConnectionState(payload: ConnectionState) {\r\n        _pusherConnectionState.value = payload\r\n    }\r\n\r\n    private val _pusherChannelEventPayload = MutableLiveData<PusherChannelEventPayload>()\r\n    val pusherChannelEventPayload: LiveData<PusherChannelEventPayload>\r\n        get() = _pusherChannelEventPayload\r\n\r\n    private fun setPusherChannelEventPayload(payload: PusherChannelEventPayload) {\r\n        _pusherChannelEventPayload.postValue(payload)// =\r\n    }\r\n\r\n    private var pusher: PusherChannelUtil? = null\r\n    fun initPusher(\r\n        channelName: String,\r\n        flag: Boolean = false /*true for calling loader in case of status api*/\r\n    ) {\r\n\r\n//        if (flag) {\r\n//            Handler().postDelayed({\r\n//                toggleLoader(true)\r\n//            }, 800)\r\n//        }\r\n\r\n        if (pusher == null) {\r\n\r\n            pusher = PusherChannelUtil.instance.apply {\r\n                initPusher(channelName, {\r\n\r\n                    setPusherChannelEventPayload(it)\r\n\r\n//                    CoroutineScope(Dispatchers.Main).launch {\r\n//                        /*_pusherChannelEventPayload.value?.let { liveData ->\r\n//                            if (it.code >= liveData.code) {\r\n//                                setPusherChannelEventPayload(it)\r\n//                            }\r\n//                        } ?:*/\r\n////                        if (it.lat != 0.0 && it.long != 0.0) {\r\n////                        }\r\n//\r\n////                        if (flag) {\r\n////                            toggleLoader(false)\r\n////                        }\r\n//                    }\r\n                }, {\r\n                    CoroutineScope(Dispatchers.Main).launch {\r\n\r\n                        if (it == ConnectionState.CONNECTING) {\r\n                            return@launch\r\n                        }\r\n\r\n                        if (_pusherConnectionState.value != it) {\r\n                            setPusherConnectionState(it)\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    fun disconnectPusher() {\r\n        Log.d(\"DISCONNECT_PUSHER\", \"disconnect pusher\")\r\n        pusher?.disconnectPusher()\r\n        pusher = null\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/app/motory/dealer/viewmodels/MainActivityViewModel.kt	(revision f80fff1291c76bdf037f895cd79c8867485ebd88)
+++ app/src/main/java/com/app/motory/dealer/viewmodels/MainActivityViewModel.kt	(date 1609226555889)
@@ -157,26 +157,45 @@
     val responseAuctionListing: LiveData<List<ResponseAuctionListingItem>>
         get() = _responseAuctionListing
 
+    fun clearAuctionLiveData() {
+        _responseAuctionListing.value = null
+    }
     private val _responseMyBidsWon = MutableLiveData<ResponseMyBidsWon>()
 
     val responseMyBidsWon: LiveData<ResponseMyBidsWon>
         get() = _responseMyBidsWon
 
+    fun clearResponseMyBidsWon() {
+        _responseMyBidsWon.value = null
+    }
+
     private val _responseMyBidsLost = MutableLiveData<ResponseMyBidsLost>()
 
     val responseMyBidsLost: LiveData<ResponseMyBidsLost>
         get() = _responseMyBidsLost
 
+    fun clearResponseMyBidsLost() {
+        _responseMyBidsLost.value = null
+    }
+
     private val _responseMyBidsLive = MutableLiveData<List<ResponseMyBidLive>>()
 
     val responseMyBidsLive: LiveData<List<ResponseMyBidLive>>
         get() = _responseMyBidsLive
 
+    fun clearResponseMyBidsLive() {
+        _responseMyBidsLive.value = null
+    }
+
     private val _responseAuctionFavouritePast = MutableLiveData<ResponseAuctionFavouritePast>()
 
     val responseAuctionFavouritePast: LiveData<ResponseAuctionFavouritePast>
         get() = _responseAuctionFavouritePast
 
+    fun clearResponseAuctionFavouritePast() {
+        _responseAuctionFavouritePast.value = null
+    }
+
     fun clearAcceptTermsLiveData() {
         _acceptTermsLiveData.value = null
     }
@@ -1325,6 +1344,7 @@
         }
     }
 
+
     //
     fun changeLanguage(request: ChangeLanguageRequest) {
 
